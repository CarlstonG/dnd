{"version":3,"sources":["components/Board.js","components/Card.js","App.js","serviceWorker.js","index.js"],"names":["Board","props","id","className","onDrop","e","preventDefault","card_id","dataTransfer","getData","card","document","getElementById","style","display","target","appendChild","onDrapOver","children","Card","draggable","onDragStart","setData","setTimeout","onDragOver","stopPropagation","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kNAGe,SAASA,EAAMC,GAkB1B,OACA,yBACAC,GAAID,EAAMC,GACVC,UAAWF,EAAME,UACjBC,OApBqB,SAAAC,GACLA,EAAEC,iBACF,IAAMC,EAAUF,EAAEG,aAAaC,QAAQ,WAEjCC,EAAOC,SAASC,eAAeL,GACrCG,EAAKG,MAAMC,QAAU,QAErBT,EAAEU,OAAOC,YAAYN,IAcrCO,WAXyB,SAAAZ,GACbA,EAAEC,mBAaGL,EAAMiB,UC3BZ,SAASC,EAAKlB,GAkBzB,OACI,yBACIC,GAAID,EAAMC,GACVC,UAAWF,EAAME,UACjBiB,UAAWnB,EAAMmB,UACjBC,YArBU,SAAAhB,GACd,IAAMU,EAASV,EAAEU,OAEjBV,EAAEG,aAAac,QAAQ,UAAWP,EAAOb,IACzCqB,YACI,WACQR,EAAOF,MAAMC,QAAU,SAC3B,IAeJU,WAVa,SAAAnB,GACbA,EAAEoB,oBAYGxB,EAAMiB,UCDRQ,MAxBf,WACE,OACE,yBAAKvB,UAAU,OACT,wBAAIA,UAAU,UAAd,mBAAuC,qDACvC,0BAAMA,UAAU,WAEf,kBAACH,EAAD,CAAOE,GAAG,UAAUC,UAAU,SAC5B,kBAACgB,EAAD,CAAMjB,GAAG,SAASC,UAAU,OAAOiB,UAAU,QAC5C,+CAIH,kBAACpB,EAAD,CAAOE,GAAG,UAAUC,UAAU,SAC5B,kBAACgB,EAAD,CAAMjB,GAAG,SAASC,UAAU,OAAOiB,UAAU,QAC5C,kDCNMO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFvB,SAASC,eAAe,SDyHpB,kBAAmBuB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9f14890f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nexport default function Board(props) {\r\n    \r\n            const drop = e => {\r\n                    e.preventDefault();\r\n                    const card_id = e.dataTransfer.getData('card_id');\r\n\r\n                    const card = document.getElementById(card_id);\r\n                    card.style.display = 'block';\r\n\r\n                    e.target.appendChild(card);\r\n            }\r\n\r\n            const dragOver = e => {\r\n                e.preventDefault();\r\n            }\r\n  \r\n  \r\n  \r\n    return (\r\n    <div\r\n    id={props.id}\r\n    className={props.className}\r\n    onDrop={drop}\r\n    onDrapOver={dragOver}\r\n    \r\n    >\r\n                    {props.children}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Card(props) {\r\n\r\n    const dragStart = e => {\r\n        const target = e.target;\r\n\r\n        e.dataTransfer.setData('card_id', target.id);\r\n        setTimeout(\r\n            () => {\r\n                    target.style.display = \"none\";\r\n             }, 0);\r\n\r\n        };\r\n    \r\n\r\n        const dragOver = e => {\r\n            e.stopPropagation();\r\n        }\r\n            \r\n    return (\r\n        <div\r\n            id={props.id}\r\n            className={props.className}\r\n            draggable={props.draggable}\r\n            onDragStart={dragStart}\r\n            onDragOver={dragOver}\r\n            \r\n            >\r\n                {props.children}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport Board from './components/Board'\nimport Card from './components/Card'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n          <h1 className=\"Header\">DnD Todo Maker! <span>üñäÔ∏è</span></h1>\n          <main className=\"flexbox\">\n\n           <Board id=\"board-1\" className=\"board\">\n             <Card id=\"card-1\" className=\"card\" draggable=\"true\">\n              <p>This is Card 1</p>\n             </Card>\n           </Board>\n\n           <Board id=\"board-2\" className=\"board\">\n             <Card id=\"card-2\" className=\"card\" draggable=\"true\">\n              <p>This is Card 2</p>\n             </Card>\n           </Board>\n\n          </main> \n         \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './main.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}